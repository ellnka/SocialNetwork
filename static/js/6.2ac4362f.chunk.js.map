{"version":3,"sources":["utils/validators/validators.js","components/common/FormControls/TextArea.jsx","components/Posts/NewPost/NewPostForm.jsx","components/Posts/NewPost/NewPostContainer.jsx","components/Posts/Post/Post.jsx","components/Posts/Posts.jsx","components/Posts/PostsContainer.jsx"],"names":["required","value","maxLengthCreator","maxLength","length","minLengthCreator","minLength","TextArea","props","input","reduxForm","form","NEW_POST_FORM_NAME","onSubmit","handleSubmit","Field","component","name","className","placeholder","validate","color","connect","addPost","addNewPostThunkCreator","values","newPostMessage","Post","moment","post","datetime","fromNow","size","onClick","deletePost","id","text","Posts","posts","reverse","map","i","key","state","postsPage","arePostsFetching","requestPosts","getPostsThunkCreator","deletePostThunkCreator","useEffect","md","offset","Preloader"],"mappings":"oGAAA,sGAAO,IAAMA,EAAW,SAAAC,GACtB,OAAIA,OACF,EAEO,qBAIEC,EAAmB,SAAAC,GAAS,OAAI,SAAAF,GAC3C,KAAIA,GAASA,EAAMG,QAAUD,GAC7B,MAAM,iBAAN,OAAwBA,EAAxB,cAGWE,EAAmB,SAAAC,GAAS,OAAI,SAAAL,GAC3C,KAAIA,GAASA,EAAMG,QAAUE,GAC7B,MAAM,iBAAN,OAAwBA,EAAxB,e,iCCfF,4BAYeC,IARE,SAACC,GAAD,OACf,kBAAC,IAAgBA,EAAjB,IAAyB,8CAAcA,EAAMC,MAAWD,IAAxD,O,gICGIF,EAAYD,YAAiB,GAC7BF,EAAYD,YAAiB,IA6BpBQ,cAAU,CAAEC,KAAMC,KAAlBF,EA3BK,SAACF,GACnB,OACE,0BAAMK,SAAUL,EAAMM,cACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAWT,IACXU,KAAK,iBACLC,UAAU,eACVC,YAAY,6BACZC,SAAU,CAACpB,IAAUG,EAAWG,MAGpC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQe,MAAM,UAAUH,UAAU,cAAlC,cCLKI,cAAQ,KAAM,CAAEC,QAASC,KAAzBF,EAZU,SAACd,GAKxB,OAAO,kBAAC,EAAD,CAAaK,SAJM,SAACY,GACzBjB,EAAMe,QAAQE,EAAOC,sB,0BC8BVC,EAlCF,SAACnB,GACZ,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,yBAAKU,UAAU,uBACb,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,iBAAf,OAGJ,yBAAKA,UAAU,uBACb,kCAAQU,IAAOpB,EAAMqB,KAAKC,SAAU,oBAAoBC,YAE1D,kBAAC,IAAD,CAAQV,MAAM,SAASW,KAAK,KAAKd,UAAU,cAAce,QAAS,WAAQzB,EAAM0B,WAAW1B,EAAMqB,KAAKM,MAAtG,MAEF,kBAAC,IAAD,KACE,6BACE,4BAAK3B,EAAMqB,KAAKO,UCAXC,EAlBD,SAAC7B,GACb,IAAKA,EAAM8B,MAAO,OAAO,KACzB,IAAIA,EAAK,YAAO9B,EAAM8B,OAItB,OAHAA,EAAQA,EAAMC,UAAUC,KAAI,SAACX,EAAMY,GAAP,OAC1B,kBAAC,EAAD,CAAMZ,KAAMA,EAAMK,WAAY1B,EAAM0B,WAAYQ,IAAKD,OAGrD,6BACGH,IC4BQhB,uBALS,SAACqB,GAAD,MAAY,CAClCL,MAAOK,EAAMC,UAAUN,MACvBO,iBAAkBF,EAAMC,UAAUC,oBAGI,CAAEC,aAAcC,IAAsBb,WAAYc,KAA3E1B,EA5BQ,SAAC,GAA2D,IAAzDuB,EAAwD,EAAxDA,iBAAkBP,EAAsC,EAAtCA,MAAOQ,EAA+B,EAA/BA,aAAcZ,EAAiB,EAAjBA,WAG/D,OAFAe,qBAAU,WAAQH,MAAkB,CAACA,IAGnC,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKI,GAAI,CAAElB,KAAM,EAAGmB,OAAQ,IAC1B,kBAAC,EAAD,MACCN,GAAoB,kBAACO,EAAA,EAAD,OACnBP,GAAoB,kBAAC,EAAD,CAAOP,MAAOA,EAAOJ,WAAYA","file":"static/js/6.2ac4362f.chunk.js","sourcesContent":["export const required = value => {\r\n  if (value) {\r\n    return undefined\r\n  } else {\r\n    return 'Field is required'\r\n  }\r\n}\r\n\r\nexport const maxLengthCreator = maxLength => value => {\r\n  if (value && value.length <= maxLength) return undefined\r\n  return `Max length is ${maxLength} symbols`\r\n}\r\n\r\nexport const minLengthCreator = minLength => value => {\r\n  if (value && value.length >= minLength) return undefined\r\n  return `Min length is ${minLength} symbols`\r\n}\r\n","import React from 'react'\r\nimport FormControl from './FormControl'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst TextArea = (props) => (\r\n  <FormControl {...props}> <textarea {...props.input} {...props} /> </FormControl>\r\n)\r\n\r\nTextArea.propTypes = {\r\n  input: PropTypes.object\r\n}\r\n\r\nexport default TextArea\r\n","import React from 'react'\r\nimport { reduxForm, Field } from 'redux-form'\r\nimport PropTypes from 'prop-types'\r\nimport { Button, Card, CardBody, CardFooter } from 'reactstrap'\r\nimport { required, maxLengthCreator, minLengthCreator } from './../../../utils/validators/validators'\r\nimport TextArea from './../../common/FormControls/TextArea'\r\nimport { NEW_POST_FORM_NAME } from './../../../redux/posts-reducer'\r\n\r\nconst minLength = minLengthCreator(5)\r\nconst maxLength = maxLengthCreator(30)\r\n\r\nconst NewPostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Card>\r\n        <CardBody>\r\n          <Field\r\n            component={TextArea}\r\n            name='newPostMessage'\r\n            className='form-control'\r\n            placeholder='Write your post message...'\r\n            validate={[required, maxLength, minLength]}\r\n          />\r\n        </CardBody>\r\n        <CardFooter>\r\n          <Button color='primary' className='pull-right'>\r\n            Post\r\n          </Button>\r\n        </CardFooter>\r\n      </Card>\r\n    </form>\r\n  )\r\n}\r\n\r\nNewPostForm.propTypes = {\r\n  handleSubmit: PropTypes.func\r\n}\r\n\r\nexport default reduxForm({ form: NEW_POST_FORM_NAME })(NewPostForm)\r\n","import React from 'react'\r\nimport NewPostForm from './NewPostForm'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  addNewPostThunkCreator\r\n} from '../../../redux/posts-reducer'\r\nimport { connect } from 'react-redux'\r\n\r\nconst NewPostContainer = (props) => {\r\n  const handlePostMessage = (values) => {\r\n    props.addPost(values.newPostMessage)\r\n  }\r\n\r\n  return <NewPostForm onSubmit={handlePostMessage} />\r\n}\r\n\r\nNewPostContainer.propTypes = {\r\n  addPost: PropTypes.func\r\n}\r\n\r\nexport default connect(null, { addPost: addNewPostThunkCreator })(NewPostContainer)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport moment from 'moment'\r\nimport { Card, CardBody, CardHeader, Button } from 'reactstrap'\r\n// import Avatar from '../../common/Avatar/Avatar'\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <div className='m-r-sm inline-block'>\r\n          <div className='avatar avatar-base bg-blue'>\r\n            <div className='user-initials'>M</div>\r\n          </div>\r\n        </div>\r\n        <div className='m-l-sm inline-block'>\r\n          <span> {moment(props.post.datetime, 'YYYY-MM-DD HH:mm').fromNow()}</span>\r\n        </div>\r\n        <Button color='danger' size='sm' className='float-right' onClick={() => { props.deletePost(props.post.id) }}>X</Button>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <div>\r\n          <h3>{props.post.text}</h3>\r\n        </div>\r\n      </CardBody>\r\n      {/*         <CardFooter>\r\n          <div className='display-flex'>\r\n            <Avatar initials='JS' color='orange' />\r\n            <input type='text' className='form-control m-l' />\r\n          </div>\r\n        </CardFooter> */}\r\n    </Card>\r\n  )\r\n}\r\n\r\nPost.propTypes = {\r\n  post: PropTypes.object,\r\n  deletePost: PropTypes.func\r\n}\r\n\r\nexport default Post\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Post from './Post/Post'\r\n\r\nconst Posts = (props) => {\r\n  if (!props.posts) return null\r\n  let posts = [...props.posts]\r\n  posts = posts.reverse().map((post, i) => (\r\n    <Post post={post} deletePost={props.deletePost} key={i} />\r\n  ))\r\n  return (\r\n    <div>\r\n      {posts}\r\n    </div>\r\n  )\r\n}\r\n\r\nPosts.propTypes = {\r\n  posts: PropTypes.array,\r\n  deletePost: PropTypes.func\r\n}\r\n\r\nexport default Posts\r\n","import React, { useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { Row, Col, Container } from 'reactstrap'\r\nimport {\r\n  getPostsThunkCreator,\r\n  deletePostThunkCreator\r\n} from '../../redux/posts-reducer'\r\nimport Preloader from '../common/Preloader/Preloader'\r\nimport NewPostContainer from './NewPost/NewPostContainer.jsx'\r\nimport Posts from './Posts'\r\n\r\nconst PostsContainer = ({ arePostsFetching, posts, requestPosts, deletePost }) => {\r\n  useEffect(() => { requestPosts() }, [requestPosts])\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col md={{ size: 8, offset: 2 }}>\r\n          <NewPostContainer />\r\n          {arePostsFetching && <Preloader />}\r\n          {!arePostsFetching && <Posts posts={posts} deletePost={deletePost} />}\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  )\r\n}\r\n\r\nPostsContainer.propTypes = {\r\n  posts: PropTypes.array,\r\n  arePostsFetching: PropTypes.bool,\r\n  requestPosts: PropTypes.func,\r\n  deletePost: PropTypes.func\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  posts: state.postsPage.posts,\r\n  arePostsFetching: state.postsPage.arePostsFetching\r\n})\r\n\r\nexport default connect(mapStateToProps, { requestPosts: getPostsThunkCreator, deletePost: deletePostThunkCreator })(PostsContainer)\r\n"],"sourceRoot":""}